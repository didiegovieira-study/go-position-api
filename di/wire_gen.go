// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/didiegovieira/go-position-api/internal/application/usecase"
	"github.com/didiegovieira/go-position-api/internal/infraestructure/api"
	"github.com/didiegovieira/go-position-api/internal/infraestructure/api/handler"
	"github.com/didiegovieira/go-position-api/internal/infraestructure/repository"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApi() (*api.Application, func(), error) {
	client, cleanup, err := provideMongoDbClient()
	if err != nil {
		return nil, nil, err
	}
	courierMongodb := repository.NewCourierMongodb(client)
	createCourier := usecase.NewCreateCourier(courierMongodb)
	handlerCreateCourier := &handler.CreateCourier{
		CreateCourierUseCase: createCourier,
	}
	getPositions := usecase.NewGetPositions(courierMongodb)
	handlerGetPositions := &handler.GetPositions{
		GetPositionsUseCase: getPositions,
	}
	getLastPosition := usecase.NewGetLastPosition(courierMongodb)
	handlerGetLastPosition := &handler.GetLastPosition{
		GetLastPositionUseCase: getLastPosition,
	}
	updatePositions := usecase.NewUpdatePositions(courierMongodb)
	handlerUpdatePositions := &handler.UpdatePositions{
		UpdatePositionsUseCase: updatePositions,
	}
	application := &api.Application{
		CreateCourier:   handlerCreateCourier,
		GetPositions:    handlerGetPositions,
		GetLastPosition: handlerGetLastPosition,
		UpdatePositions: handlerUpdatePositions,
	}
	return application, func() {
		cleanup()
	}, nil
}

// wire.go:

var wireApiSet = wire.NewSet(
	provideMongoDbClient,

	provideCourierRepositoryMongodb,

	provideCreateCourierUseCaseSet,
	provideUpdatePositionsUseCaseSet,
	provideGetPositionsUseCaseSet,
	provideGetLastPositionUseCaseSet,

	apiHandlersSet, wire.Struct(new(api.Application), "*"),
)
